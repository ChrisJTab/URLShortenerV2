version: '3.9'

services:
  http-server:
    image: registry-server.taild476f.ts.net/flask-app:dev

    deploy:
      mode: global
      placement:
        constraints:
          - node.role == worker
#      restart_policy:
#          condition: on-failure
    networks:
      - a2group79-net
      - redis-net
    ports:
      - "5000:5000"
  
  # Writer app docker configs
  writer-server:
    image: registry-server.taild476f.ts.net/writer-app:dev
    deploy:
      mode: global
      restart_policy:
          condition: on-failure
      placement:
        constraints:
          - node.role == manager
    networks:
      - a2group79-net
      - redis-net

  redis-master:
    image: registry-server.taild476f.ts.net/redis:latest
    command: ["redis-server", "/conf/redis.conf", "--port", "6379"]
    deploy:
      replicas: 1
      placement:
        constraints:
          - node.role == manager
      restart_policy:
        condition: on-failure
    networks:
      - redis-net
    ports:
      - "6379:6379"
    volumes:
      - redis-volume:/data
      - ./conf/redis.conf:/conf/redis.conf
    labels:
      - redis.master

  redis-slave:
    image: registry-server.taild476f.ts.net/redis:latest
    command: ["redis-server", "--port", "6380", "--slaveof", "redis-master", "6379"]
    deploy:
      # mode: global
      replicas: 2
      placement:
        constraints:
          - node.role == worker
      restart_policy:
        condition: on-failure
    networks:
      - redis-net
    volumes:
      - redis-volume:/data
    labels:
      - redis.slave

  manager:
    environment:
      - VISUALIZER_TYPE=manager
    image: registry-server.taild476f.ts.net/yandeu/visualizer:dev
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    networks:
      - agent_network
    deploy:
      mode: replicated
      replicas: 1
      placement:
        constraints: [node.role == manager]
    labels:
      - visualizer.manager
    healthcheck:
      test: curl -f http://localhost:3500/healthcheck || exit 1
      interval: 10s
      timeout: 2s
      retries: 3
      start_period: 5s
    ports:
      - '9500:3500'

  agent:
    environment:
      - VISUALIZER_TYPE=agent
    image: registry-server.taild476f.ts.net/yandeu/visualizer:dev
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    networks:
      - agent_network
    deploy:
      mode: global
      placement:
        constraints: [node.platform.os == linux]
    labels:
      - visualizer.agent
    healthcheck:
      test: curl -f http://localhost:9501/healthcheck || exit 1
      interval: 10s
      timeout: 2s
      retries: 3
      start_period: 5s


volumes:
  redis-volume:

networks:
  a2group79-net:
  redis-net:
  agent_network:
    driver: overlay
    attachable: true
